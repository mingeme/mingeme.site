---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

const { pageTitle } = Astro.props;
---

<html lang="zh">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover" />
    <meta name="generator" content={Astro.generator} />
    <meta name="theme-color" content="" />
    <title>{pageTitle}</title>
    <script is:inline>
      const primaryColorScheme = ''; // "light" | "dark"

      // Get theme data from local storage
      const currentTheme = localStorage.getItem('theme');

      function getPreferTheme() {
        // return theme value in local storage if it is set
        if (currentTheme) return currentTheme;

        // return primary color scheme if it is set
        if (primaryColorScheme) return primaryColorScheme;

        // return user device's prefer color scheme
        return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      }

      let themeValue = getPreferTheme();

      function setPreference() {
        localStorage.setItem('theme', themeValue);
        reflectPreference();
      }

      function reflectPreference() {
        document.firstElementChild.setAttribute('class', 'light');

        document.querySelector('#theme-btn')?.setAttribute('aria-label', themeValue);

        // Get a reference to the body element
        const body = document.body;

        // Check if the body element exists before using getComputedStyle
        if (body) {
          // Get the computed styles for the body element
          const computedStyles = window.getComputedStyle(body);

          // Get the background color property
          const bgColor = computedStyles.backgroundColor;

          // Set the background color in <meta theme-color ... />
          document.querySelector("meta[name='theme-color']")?.setAttribute('content', bgColor);
        }
      }

      // set early so no page flashes / CSS is made aware
      reflectPreference();

      window.onload = () => {
        function setThemeFeature() {
          // set on load so screen readers can get the latest value on the button
          reflectPreference();

          // now this script can find and listen for clicks on the control
          document.querySelector('#theme-btn')?.addEventListener('click', () => {
            themeValue = themeValue === 'light' ? 'dark' : 'light';
            setPreference();
          });
        }

        setThemeFeature();

        // Runs on view transitions navigation
        document.addEventListener('astro:after-swap', setThemeFeature);
      };

      // sync with system changes
      window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', ({ matches: isDark }) => {
        themeValue = isDark ? 'dark' : 'light';
        setPreference();
      });
    </script>
  </head>
  <body class="my-0 mx-auto min-h-100vh line-height-6 flex flex-col dark:bg-dark">
    <Header />
    <main class="flex-1 dark:bg-dark px-4">
      <slot />
    </main>
    <Footer />
  </body>

  <style is:global>
    html {
      font-family: sans-serif;
    }

    * {
      box-sizing: border-box;
    }

    a {
      --at-apply: decoration-none text-blue-600;
    }
  </style>
</html>
