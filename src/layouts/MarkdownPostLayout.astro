---
import moment from 'moment-timezone';
import BaseLayout from './BaseLayout.astro';

const { frontmatter } = Astro.props;
---

<BaseLayout pageTitle={`${frontmatter.title} | Mingeme's blog`}>
  <div
    class="text-base prose dark:prose-invert prose-truegray xl:text-xl mx-auto"
  >
    <h1>{frontmatter.title}</h1>
    <div class="flex items-center my-2 opacity-80 space-x-2">
      <div class="i-carbon-calendar"></div>
      <span class="text-base">
        <time datetime={frontmatter.pubDate}>
          {
            moment(frontmatter.pubDate)
              .tz('Asia/Shanghai')
              .locale('zh-cn')
              .format('ll')
          }
        </time>
        <span aria-hidden="true"> | </span>
        <span class="text-nowrap">
          {
            moment(frontmatter.pubDate)
              .tz('Asia/Shanghai')
              .locale('zh-cn')
              .format('HH:mm:ss')
          }
        </span>
      </span>
    </div>
    <article>
      <slot />
    </article>
  </div>
</BaseLayout>

<style is:global>
  .image-viewer {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.9);
    display: none;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .image-viewer.active {
    display: flex;
  }

  .image-viewer img {
    max-width: 90%;
    max-height: 90vh;
    object-fit: contain;
  }

  .image-viewer .nav-button {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 255, 255, 0.1);
    color: white;
    padding: 1rem;
    cursor: pointer;
    border-radius: 50%;
    transition: background 0.3s;
  }

  .image-viewer .nav-button:hover {
    background: rgba(255, 255, 255, 0.2);
  }

  .image-viewer .prev {
    left: 1rem;
  }

  .image-viewer .next {
    right: 1rem;
  }
</style>

<script is:inline>
  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = '复制';
    let codeBlocks = Array.from(document.querySelectorAll('pre'));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement('div');
      wrapper.style.position = 'relative';

      let copyButton = document.createElement('button');
      copyButton.className =
        'copy-code absolute right-3 -top-3 rounded bg-white text-gray-900 dark:bg-dark dark:text-white px-2 py-1 text-xs leading-4 font-medium border-1 border-gray-300';
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute('tabindex', '0');
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock.parentNode.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener('click', async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector('code');
      let text = code.innerText;

      await navigator.clipboard.writeText(text);

      // visual feedback that task is completed
      button.innerText = '已复制';

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();
  document.addEventListener('astro:after-swap', attachCopyButtons);

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector('#back-to-top')?.addEventListener('click', () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();
  document.addEventListener('astro:after-swap', backToTop);

  /** Initialize image viewer functionality */
  function initImageViewer() {
    // Create viewer elements
    const viewer = document.createElement('div');
    viewer.className = 'image-viewer';
    const img = document.createElement('img');
    const prevBtn = document.createElement('div');
    prevBtn.className = 'nav-button prev';
    prevBtn.innerHTML = '←';
    const nextBtn = document.createElement('div');
    nextBtn.className = 'nav-button next';
    nextBtn.innerHTML = '→';
    
    viewer.appendChild(img);
    viewer.appendChild(prevBtn);
    viewer.appendChild(nextBtn);
    document.body.appendChild(viewer);

    // Get all images in the article
    const articleImages = Array.from(document.querySelectorAll('article img'));
    let currentIndex = 0;

    // Add click handlers to all images
    articleImages.forEach((image, index) => {
      image.style.cursor = 'zoom-in';
      image.addEventListener('click', (e) => {
        e.preventDefault();
        currentIndex = index;
        showImage(currentIndex);
      });
    });

    function showImage(index) {
      img.src = articleImages[index].src;
      viewer.classList.add('active');
    }

    // Navigation handlers
    prevBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      currentIndex = (currentIndex - 1 + articleImages.length) % articleImages.length;
      showImage(currentIndex);
    });

    nextBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      currentIndex = (currentIndex + 1) % articleImages.length;
      showImage(currentIndex);
    });

    // Close viewer on background click
    viewer.addEventListener('click', () => {
      viewer.classList.remove('active');
    });

    // Prevent image click from closing viewer
    img.addEventListener('click', (e) => {
      e.stopPropagation();
    });
  }

  initImageViewer();
  document.addEventListener('astro:after-swap', initImageViewer);
</script>
