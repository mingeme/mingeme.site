---
interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}

const { headings } = Astro.props;
---

<div class="relative">
  <!-- 遮罩层 -->
  <div
    id="toc-overlay"
    class="xl:hidden fixed inset-0 bg-black/50 backdrop-blur-sm opacity-0 pointer-events-none transition-opacity duration-300 ease-in-out z-40"
  >
  </div>

  <!-- 移动端目录按钮 -->
  <button
    id="toc-toggle"
    class="xl:hidden fixed right-4 bottom-4 bg-gray-800/90 dark:bg-gray-700/90 text-white p-3 rounded-full shadow-lg hover:bg-gray-700 dark:hover:bg-gray-600 transition-all hover:scale-105 active:scale-95 z-50"
    aria-label="Toggle table of contents"
  >
    <div class="w-5 h-5 i-carbon-list"></div>
  </button>

  <!-- 移动端抽屉式目录 -->
  <div
    id="toc-drawer"
    class="xl:hidden fixed inset-y-0 right-0 w-72 bg-white/90 dark:bg-gray-800/90 backdrop-blur transform translate-x-full transition-all duration-300 ease-out z-40 overflow-y-auto scrollbar-thin scrollbar-track-transparent scrollbar-thumb-gray-300 dark:scrollbar-thumb-gray-600"
  >
    <div class="p-6">
      <div class="text-lg font-medium mb-4 text-gray-900 dark:text-gray-100">
        目录
      </div>
      <div class="toc space-y-2">
        {
          headings.map((heading) => (
            <a
              href={`#${heading.slug}`}
              class={`block py-1.5 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-700/50 rounded transition-all ${`pl-${(heading.depth - 1) * 4}`}`}
            >
              {heading.text}
            </a>
          ))
        }
      </div>
    </div>
  </div>

  <!-- 桌面端固定目录 -->
  <div
    class="hidden xl:block fixed right-[calc(50%+24rem)] top-[120px] w-[16rem] overflow-auto max-h-[calc(100vh-9rem)]"
  >
    <div class="text-sm">
      <div class="font-medium mb-2 text-gray-900 dark:text-gray-100">目录</div>
      <div class="toc">
        {
          headings.map((heading) => (
            <a
              href={`#${heading.slug}`}
              class={`block py-1 text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 transition-colors ${`pl-${(heading.depth - 1) * 4}`}`}
            >
              {heading.text}
            </a>
          ))
        }
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const tocToggle = document.getElementById('toc-toggle');
    const tocDrawer = document.getElementById('toc-drawer');
    const tocClose = document.getElementById('toc-close');
    const tocOverlay = document.getElementById('toc-overlay');
    let isOpen = false;

    const toggleDrawer = () => {
      isOpen = !isOpen;
      tocDrawer?.classList.toggle('translate-x-full', !isOpen);
      if (tocOverlay) {
        tocOverlay.style.opacity = isOpen ? '1' : '0';
        tocOverlay.style.pointerEvents = isOpen ? 'auto' : 'none';
      }
    };

    tocToggle?.addEventListener('click', toggleDrawer);
    tocClose?.addEventListener('click', toggleDrawer);
    tocOverlay?.addEventListener('click', toggleDrawer);

    // 点击目录链接后自动关闭抽屉
    const tocLinks = tocDrawer?.querySelectorAll('a');
    tocLinks?.forEach((link) => {
      link.addEventListener('click', () => {
        isOpen = false;
        tocDrawer?.classList.add('translate-x-full');
        if (tocOverlay) {
          tocOverlay.style.opacity = '0';
          tocOverlay.style.pointerEvents = 'none';
        }
      });
    });
  });
</script>

<style is:global>
  :target {
    scroll-margin-top: 6rem;
  }
</style>
