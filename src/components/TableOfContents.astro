---
interface Props {
  headings: Array<{
    depth: number;
    slug: string;
    text: string;
  }>;
}

const { headings } = Astro.props;

const indentClass = (depth: number) => {
  if (depth <= 1) return '';
  if (depth === 2) return 'pl-4';
  if (depth === 3) return 'pl-8';
  return 'pl-10';
};
---

<div class="relative">
  <button
    id="toc-toggle"
    class="fixed bottom-4 right-4 flex h-12 w-12 items-center justify-center rounded-full border border-[#211811]/10 bg-white/90 text-[#211811] shadow-lg transition hover:bg-[#e66e19]/10 lg:hidden"
    aria-label="打开目录"
  >
    <svg viewBox="0 0 24 24" class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="1.6">
      <path d="M5 7h14M5 12h14M5 17h9" stroke-linecap="round" stroke-linejoin="round"></path>
    </svg>
  </button>

  <div
    id="toc-drawer"
    class="fixed inset-0 z-40 hidden flex-col bg-[#f8f7f6]/95 px-6 py-10 opacity-0 transition-opacity duration-200 backdrop-blur lg:hidden"
  >
    <div class="flex items-center justify-between">
      <div class="flex items-center gap-2 text-lg font-semibold text-[#211811]">
        <svg viewBox="0 0 24 24" class="h-5 w-5" fill="none" stroke="currentColor" stroke-width="1.6">
          <path d="M5 7h14M5 12h14M5 17h9" stroke-linecap="round" stroke-linejoin="round"></path>
        </svg>
        目录
      </div>
      <button
        id="toc-close"
        type="button"
        class="h-10 w-10 rounded-full border border-[#211811]/10 text-[#211811] transition hover:bg-[#e66e19]/10"
        aria-label="关闭目录"
      >
        <span class="text-xl">&times;</span>
      </button>
    </div>
    <nav class="mt-8 flex-1 overflow-y-auto space-y-2">
      {
        headings.map((heading) => (
          <a
            href={`#${heading.slug}`}
            class={`block rounded-lg px-3 py-2 text-sm text-[#211811]/70 transition hover:bg-[#e66e19]/10 hover:text-[#e66e19] ${indentClass(heading.depth)}`}
          >
            {heading.text}
          </a>
        ))
      }
    </nav>
  </div>

  <aside class="sticky top-28 hidden rounded-2xl border border-[#211811]/10 bg-white/70 p-5 shadow-sm lg:block">
    <div class="flex items-center gap-2 text-sm font-semibold text-[#211811]">
      <svg viewBox="0 0 24 24" class="h-4 w-4" fill="none" stroke="currentColor" stroke-width="1.6">
        <path d="M5 7h14M5 12h14M5 17h9" stroke-linecap="round" stroke-linejoin="round"></path>
      </svg>
      目录
    </div>
    <nav class="mt-4 space-y-2 text-sm">
      {
        headings.map((heading) => (
          <a
            href={`#${heading.slug}`}
            class={`block rounded-lg px-3 py-1.5 text-[#211811]/60 transition hover:bg-[#e66e19]/10 hover:text-[#e66e19] ${indentClass(heading.depth)}`}
          >
            {heading.text}
          </a>
        ))
      }
    </nav>
  </aside>
</div>

<script>
  document.addEventListener('astro:page-load', initToc);
  document.addEventListener('astro:after-swap', initToc);

  function initToc() {
    const drawer = document.getElementById('toc-drawer');
    const toggle = document.getElementById('toc-toggle');
    const close = document.getElementById('toc-close');

    if (!drawer || !toggle || !close) {
      return;
    }

    const open = () => {
      drawer.style.display = 'flex';
      requestAnimationFrame(() => {
        drawer.style.opacity = '1';
      });
    };

    const hide = () => {
      drawer.style.opacity = '0';
      setTimeout(() => {
        drawer.style.display = 'none';
      }, 200);
    };

    toggle.onclick = open;
    close.onclick = hide;
    drawer.onclick = (event) => {
      if (event.target === drawer) {
        hide();
      }
    };

    const links = drawer.querySelectorAll('a');
    links.forEach((link) => {
      link.addEventListener('click', hide);
    });
  }
</script>

<style is:global>
  :target {
    scroll-margin-top: 6rem;
  }
</style>
